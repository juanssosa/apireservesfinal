# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

variables:
  azureSubscription: 'bcbe6e1c-2b9b-4fbd-8a8d-9017e8d04c4e'
  webAppName: 'apireservesfinal'
  environmentName: 'apireservesfinal'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build --if-present
        npm run test --if-present
      displayName: 'npm install, build and test'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: apireservesfinal'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              appName: $(webAppName)
              runtimeStack: 'NODE|10.10'
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              startUpCommand: 'npm run start'

- stage: DeployTerraform
  displayName: 'Deploy Terraform'
  dependsOn: Deploy
  jobs:
  - job: DeployTerraform
    displayName: 'Deploy Terraform Infrastructure'
    pool:
      vmImage: $(vmImageName)
    strategy:
      maxParallel: 1
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '2.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: |
        cd terraform
        terraform init -backend-config=backend-config.tfvars
        terraform apply -auto-approve
      displayName: 'Deploy Infrastructure with Terraform'
